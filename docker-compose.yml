version: '3.8'

networks:
  app_network:
    driver: bridge
    name: app_network

services:
  frontend:
    image: joel030303/frontend:latest
    container_name: frontend
    ports:
      - "3001:3001"
    networks:
      - app_network
    environment:
      - KAFKA_PRODUCER_URL=http://kafka-producer:8000
      - FLINK_PROCESSOR_URL=http://flink-processor:8001
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - NODE_ENV=production
      - PORT=3001
      - HOSTNAME=0.0.0.0
      - CITY_API_URL=http://city-api:8003
      - WEATHER_API_KEY=${WEATHER_API_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./configuration.yml:/app/configuration.yml:ro
      - ./shared:/app/shared:ro
    depends_on:
      city-api:
        condition: service_healthy
      kafka-producer:
        condition: service_started
      flink-processor:
        condition: service_started
      postgres:
        condition: service_started
    restart: unless-stopped
    mem_limit: 256m

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      KAFKA_HEAP_OPTS: "-Xmx1g -Xms512m"
      ZOOKEEPER_MAX_CLIENT_CNXNS: 100
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "*"
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    networks:
      - app_network
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    restart: unless-stopped
    mem_limit: 1.5g
    memswap_limit: 2g
    cpu_shares: 512
    cpu_quota: 100000

  kafka:
    image: bitnami/kafka:3.5
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_NUM_PARTITIONS=6
      - KAFKA_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_HEAP_OPTS=-Xmx1g -Xms512m
    networks:
      - app_network
    volumes:
      - kafka_data:/bitnami/kafka
    restart: unless-stopped
    mem_limit: 2g
    memswap_limit: 3g
    cpu_shares: 1024
    cpu_quota: 200000

  kafka-producer:
    image: joel030303/kafka-producer:latest
    container_name: kafka-producer
    ports:
      - "8000:8000"
    volumes:
      - ./city-api:/mnt:rw
      - .:/app:rw
      - ./shared:/app/shared:ro
    depends_on:
      city-api:
        condition: service_healthy
      kafka:
        condition: service_started
      zookeeper:
        condition: service_started
      postgres:
        condition: service_started
    environment:
      KAFKA_SERVER: "kafka:9092"
      ZOOKEEPER_SERVER: "zookeeper:2181"
      PRODUCER_INTERVAL: 100
      WEATHER_API_KEY: ${WEATHER_API_KEY}
      PYTHONPATH: /app
    networks:
      - app_network
    restart: unless-stopped
    mem_limit: 5g
    memswap_limit: 6g
    cpu_shares: 2048
    cpu_quota: 400000

  flink-processor:
    image: joel030303/flink-processor:latest
    container_name: flink-processor
    ports:
      - "8001:8001"
    depends_on:
      city-api:
        condition: service_healthy
      kafka:
        condition: service_started
      zookeeper:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      KAFKA_SERVER: "kafka:9092"
      ZOOKEEPER_SERVER: "zookeeper:2181"
      PRODUCER_INTERVAL: 100
      # PostgreSQL configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      # Flink specific configurations
      FLINK_ENV_JAVA_OPTS: "-XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:+ParallelRefProcEnabled -XX:+UseStringDeduplication -XX:+AggressiveOpts"
      FLINK_ENV_JAVA_OPTS_JM: "-Xmx4g -Xms4g"
      FLINK_ENV_JAVA_OPTS_TM: "-Xmx4g -Xms4g"
      FLINK_MAX_PARALLELISM: "8"
      FLINK_PARALLELISM: "4"
    volumes:
      - .:/app:rw
    networks:
      - app_network
    restart: unless-stopped
    mem_limit: 5g
    memswap_limit: 6g
    cpu_shares: 2048
    cpu_quota: 400000
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  postgres:
    image: joel030303/postgres:latest
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      # PostgreSQL memory configuration
      POSTGRES_SHARED_BUFFERS: 2GB
      POSTGRES_WORK_MEM: 32MB
      POSTGRES_MAINTENANCE_WORK_MEM: 512MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 6GB
    ports:
      - "5438:5432"
    networks:
      - app_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    mem_limit: 8g
    memswap_limit: 10g
    cpu_shares: 2048
    cpu_quota: 400000
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  db-manager:
    image: joel030303/db-manager:latest
    container_name: db-manager
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - MAX_RECORDS=500
      - CHECK_INTERVAL=30
      - BATCH_DELETE_SIZE=3000
    restart: unless-stopped
    mem_limit: 4g
    memswap_limit: 5g
    cpu_shares: 1024
    cpu_quota: 200000

  city-api:
    image: joel030303/city-api:latest
    container_name: city-api
    ports:
      - "8003:8003"
    volumes:
      - ./city-api:/app/city-api:rw
      - .:/app:rw
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PYTHONPATH=/app/city-api
      - GEODB_CITIES_API_KEY=${GEODB_CITIES_API_KEY}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - GIPHY_API_KEY=${GIPHY_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8003/ready"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      redis:
        condition: service_healthy

  redis:
    image: joel030303/redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - LOAD_STATIC_CITIES=${LOAD_STATIC_CITIES:-false}
    command: --appendonly yes --save 60 1
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    mem_limit: 512m
    memswap_limit: 1g
    cpu_shares: 512
    cpu_quota: 100000

volumes:
  settings:
  data:
  zookeeper_data:
    driver: local
  zookeeper_log:
    driver: local
  kafka_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local 