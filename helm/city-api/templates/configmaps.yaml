apiVersion: v1
kind: ConfigMap
metadata:
  name: shared-code
  namespace: {{ .Release.Namespace }}
data:
  "__init__.py": |
    # Shared package initialization
  "utils.py": {{ (.Files.Get "../../shared/utils.py") | quote }}
  "weather.__init__.py": |
    # Weather package initialization
  "weather.api.py": {{ (.Files.Get "../../shared/weather/api.py") | quote }}
  "weather.city_coordinates.py": {{ (.Files.Get "../../shared/weather/city_coordinates.py") | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: city-api-code
  namespace: {{ .Release.Namespace }}
data:
  "__init__.py": |
    # City API package initialization
  "main.py": |
    from fastapi import FastAPI, HTTPException
    from pydantic import BaseModel
    from datetime import datetime
    import json
    import os
    from shared.utils import setup_logging
    from shared.weather.api import get_weather_data
    
    # Set up logging
    logger = setup_logging("city-api")
    
    # Initialize FastAPI app
    app = FastAPI(title="City Temperature API")
    
    class CityTemperature(BaseModel):
        city: str
        country: str
        temperature: float
        timestamp: datetime
    
    @app.get("/health")
    async def health_check():
        return {"status": "healthy"}
    
    @app.post("/temperature")
    async def post_temperature(data: CityTemperature):
        try:
            logger.info(f"Received temperature data for {data.city}, {data.country}")
            return {"status": "success", "message": "Temperature data received"}
        except Exception as e:
            logger.error(f"Error processing temperature data: {str(e)}")
            raise HTTPException(status_code=500, detail=str(e))
  "config.configuration.yml": {{ (.Files.Get "../../city-api/config/configuration.yml") | quote }}
  "config.city-edits.yml": {{ (.Files.Get "../../city-api/config/city-edits.yml") | quote }}
  "config.country-codes.json": {{ (.Files.Get "../../city-api/config/country-codes.json") | quote }} 