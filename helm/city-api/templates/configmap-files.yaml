apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "city-api.fullname" . }}-shared-files
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "city-api.labels" . | nindent 4 }}
data:
  "__init__.py": |
    """Shared utilities package for city temperature services."""

    from .utils import (
        setup_logging,
        parse_json_message,
        format_temperature,
        validate_city_data
    )
  "utils.py": |
    """Shared utility functions for city temperature services."""

    import json
    import logging
    from typing import Any, Dict, Optional

    def setup_logging(service_name: str) -> logging.Logger:
        """Configure a logger instance with consistent formatting."""
        logger = logging.getLogger(service_name)
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)
            logger.setLevel(logging.INFO)
        return logger

    def parse_json_message(message: str) -> Optional[Dict[str, Any]]:
        """Safely parse a JSON string into a dictionary."""
        try:
            return json.loads(message)
        except json.JSONDecodeError:
            return None

    def format_temperature(temp_celsius: float) -> str:
        """Format a temperature value with proper units."""
        return f"{temp_celsius:.1f}Â°C"

    def validate_city_data(data: Dict[str, Any]) -> bool:
        """Validate city temperature data structure and required fields."""
        required_fields = {
            'city': str,
            'country': str,
            'continent': str,
            'temperature': (int, float)
        }
        
        try:
            for field, field_type in required_fields.items():
                if field not in data:
                    return False
                if not isinstance(data[field], field_type):
                    return False
            return True
        except Exception:
            return False

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "city-api.fullname" . }}-city-api-files
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "city-api.labels" . | nindent 4 }}
data:
  "__init__.py": |
    """City API package."""
  "main.py": |
{{ .Files.Get "files/city_api/main.py" | indent 4 }} 