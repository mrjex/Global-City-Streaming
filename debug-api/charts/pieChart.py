from pandas import *
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from operator import itemgetter 
import sys
import os

sys.path.append('/app/debug-api')

import apis.colorApi as colorApi
import utils

# Configuration file path
configPath = "/app/configuration.yml"

# Get cities from configuration
cities = utils.parseYmlFile(configPath, "realTimeProduction.cities")

# Read data from CSV files
data = []
for city in cities:
    try:
        df = pd.read_csv(f"/app/debug-api/generated-artifacts/csvs/{city}.csv")
        avg_temp = df['average_temperature'].mean()
        data.append({
            'city': city,
            'temperature': avg_temp
        })
    except Exception as e:
        print(f"Error reading data for {city}: {e}")

# Get chart configuration
pngOutput = utils.parseYmlFile(configPath, "debugApi.charts.pieChart.pngOutput")
chartType = utils.parseYmlFile(configPath, "debugApi.charts.pieChart.chartType")
pieColorTheme = utils.parseYmlFile(configPath, "debugApi.charts.pieChart.pieColorTheme")

# Create pie chart
df = pd.DataFrame(data)
fig = px.pie(df, values='temperature', names='city',
             title='Average Temperature Distribution by City',
             labels={'temperature': 'Temperature (Â°C)'})

# Update layout
fig.update_layout(
    title_x=0.5,
    plot_bgcolor='white',
    paper_bgcolor='white',
    font=dict(size=12)
)

# Save chart as HTML
fig.write_html("/app/public/pie_chart.html")

chartTypes = ['Random-Colors', '4-Coldest-Cities', 'Color-Theme'] # Available options


## PIE CHART CONFIGURATIONS  ##

selectedChartType = utils.parseYmlFile(configPath, "debugApi.charts.pieChart.chartType")
colorTheme = utils.parseYmlFile(configPath, "debugApi.charts.pieChart.pieColorTheme")



# Returns a key-value dictionary:
#   - key: 'city_name' (e.g 'Stockholm', 'Moscow', ...)
#   - value: The sum of all 'average_temperature' instances for the particular city
def getCitySums():
    output = {}

    for city in cities:
        df2 = pd.read_csv(f"/app/debug-api/generated-artifacts/csvs/{city}.csv")

        currentCitySum = df2['average_temperature'].sum()
        output[city] = currentCitySum

    return output




def plotRandomColoredChart(cityTemperatureSums):

    citySumsArray = list(cityTemperatureSums.values())
    
    fig = go.Figure(data=[go.Pie(labels=cities, values=citySumsArray, textinfo='label+percent',
                                insidetextorientation='radial'
                                )])
    
    fig.show()
    if pngOutput == True:
        exportPng(fig, "random-colors/random-colors-now")




# Plots the 4 cities with the coldest temperatures. These cities are
# selected by measuring all the cities' total sum of 'average_temperature'
def plot4HottestCities(cityTemperatureSums):

    numCities = min(4, len(cities)) # Plot at maximum 4 cities, but also account for the cases where the developer is working with less than 4 cities
    hottestCities = getColdestCities(cityTemperatureSums, numCities)

    cityNames = list(hottestCities.keys())
    citySums = list(hottestCities.values())

    colors = ["gold", "mediumturquoise", "darkorange", "lightgreen"]

    resultingColors = colors[:numCities]


    fig = go.Figure(
        data=[
            go.Pie(
                labels=cityNames,
                values=citySums,
                textfont_size=20,
                marker=dict(colors=resultingColors, pattern=dict(shape=[".", "x", "+", "-"]))
            )
        ]
    )

    fig.show()
    if pngOutput == True:
        exportPng(fig, "4-coldest/4-coldest-now")



# Returns a dictionary of the 'n' coldest cities and their respective temperature-sums
def getColdestCities(inputDictionary, n):
    hottestCities = dict(sorted(inputDictionary.items(), key = itemgetter(1))[:n])
    return hottestCities


# Plots the cities on a pie chart where each color is unique but belongs
# to the same color palette generated by the Color-API.
# Upper constraint: Number of cities <= 18, since the API generates at maximum 18 colors per palette
def plotColorThemedChart(cityTemperatureSums):
    cityColorMapping = colorApi.getCityChartColors(colorTheme)
    citySumsArray = list(cityTemperatureSums.values())

    fig = px.pie(values=citySumsArray, names=cities, color=cities,
                color_discrete_map=cityColorMapping)
    
    fig.show()
    
    if pngOutput == True:
        exportPng(fig, f"color-theme/all-cities [{colorTheme.upper()} THEME]")



def exportPng(figure, fileOutputName):
    figure.write_image(f"/app/debug-api/generated-artifacts/pngs/pie-chart/{fileOutputName}.png")



def plotPieChart():

    cityTemperatureSums = getCitySums()

    # Generare Random-Colored pie chart
    if selectedChartType == chartTypes[0]:
        return plotRandomColoredChart(cityTemperatureSums)
    
    # Generate 4-Coldest-Cities Pattern-Styled pie chart
    elif selectedChartType == chartTypes[1]:
        return plot4HottestCities(cityTemperatureSums)
    
    # Generate color-themed pie chart
    else:
        plotColorThemedChart(cityTemperatureSums)