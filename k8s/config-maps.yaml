apiVersion: v1
kind: ConfigMap
metadata:
  name: app-files
  namespace: global-city-streaming
data:
  # City API Configuration
  "city-api/config/configuration.yml": |
    services:
      cityApi:
        numberOfCitiesForSelectedCountry: 10
      kafka:
        bootstrapServers: kafka-0.kafka.global-city-streaming.svc.cluster.local:9092
      zookeeper:
        servers: zookeeper-0.zookeeper.global-city-streaming.svc.cluster.local:2181

  "city-api/config/city-edits.yml": |
    countries:
      "Sweden, Stockholm":
        description: "Capital of Sweden, known for its beautiful archipelago and innovative tech scene"
      "Norway, Oslo":
        description: "Capital of Norway, surrounded by mountains and fjords"
      # Add more city descriptions as needed

  # Shared Weather Module
  "shared/weather/__init__.py": |
    from .api import WeatherAPI
    __all__ = ['WeatherAPI']

  "shared/weather/api.py": |
    import os
    import requests
    import sys
    import aiohttp
    import asyncio
    from typing import Optional, Dict, Any, List

    class WeatherAPI:
        def __init__(self):
            self.api_key = os.environ.get('WEATHER_API_KEY')
            self.api_url = "https://api.weatherapi.com/v1/current.json"
            self.batch_enabled = False
            
            if not self.api_key:
                raise ValueError("WEATHER_API_KEY environment variable not set")

        def fetch_city_data(self, city: str) -> Optional[Dict[str, Any]]:
            try:
                query = {'key': self.api_key, 'q': city, 'aqi': 'yes'}
                response = requests.get(self.api_url, params=query)
                
                if not response.ok:
                    print(f"Error: Weather API request failed with status {response.status_code}", file=sys.stderr)
                    return None
                    
                data = response.json()
                result = self._compose_city_object(data, city)
                return result
                
            except Exception as e:
                print(f"Error fetching data for {city}: {str(e)}", file=sys.stderr)
                return None

        def _compose_city_object(self, api_response: Dict[str, Any], city: str) -> Dict[str, Any]:
            try:
                lat = api_response['location']['lat']
                lon = api_response['location']['lon']
                
                result = {
                    'city': city,
                    'country': api_response['location']['country'],
                    'continent': api_response['location']['tz_id'].split("/")[0],
                    'temperatureCelsius': api_response['current']['temp_c'],
                    'latitude': lat,
                    'longitude': lon
                }
                return result
            except Exception as e:
                print(f"Error composing city object for {city}: {str(e)}", file=sys.stderr)
                return None

  "shared/weather/city_coordinates.py": |
    #!/usr/bin/env python3
    import sys
    import json
    import os
    from .api import WeatherAPI

    def get_city_coordinates(cities):
        weather_api = WeatherAPI()
        weather_api.batch_enabled = True
        
        print(f"Fetching data for {len(cities)} cities", file=sys.stderr)
        
        city_data = {}
        
        print("Fetching data for each city individually", file=sys.stderr)
        for city in cities:
            data = weather_api.fetch_city_data(city)
            if data:
                city_data[city] = data
                print(f"Added coordinates for {city}", file=sys.stderr)
        
        print(json.dumps(city_data))
        return city_data

    if __name__ == "__main__":
        if len(sys.argv) < 2:
            print(json.dumps({"error": "No cities provided"}))
            sys.exit(1)
        
        cities = sys.argv[1:]
        get_city_coordinates(cities)

  "shared/__init__.py": |
    # Empty init file to make the directory a Python package

  "shared/utils.py": |
    import json
    import logging
    from typing import Dict, Any

    def setup_logging(name: str, level: str = "INFO") -> logging.Logger:
        logger = logging.getLogger(name)
        logger.setLevel(level)
        
        handler = logging.StreamHandler()
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        
        return logger

    def parse_json_message(message: str) -> Dict[str, Any]:
        try:
            return json.loads(message)
        except json.JSONDecodeError as e:
            raise ValueError(f"Invalid JSON message: {e}")

    def format_temperature(temp: float) -> str:
        return f"{temp:.1f}Â°C"

    def validate_city_data(data: Dict[str, Any]) -> bool:
        required_fields = ['city', 'country', 'temperature', 'timestamp']
        return all(field in data for field in required_fields)

  # Scripts
  "city-api/countryCities.sh": |
    #!/bin/bash
    
    # Debug output redirected to stderr so it doesn't interfere with JSON output
    debug() {
        echo "$1" >&2
    }

    debug "=== SCRIPT START ==="
    debug "Current directory: $(pwd)"
    debug "Script arguments: $@"

    # Get the country code for the given country
    COUNTRY="$1"
    debug "Input country: $COUNTRY"

    # Get country code from JSON file
    debug "Getting country code..."
    COUNTRY_CODE=$(echo "$COUNTRY" | tr '[:upper:]' '[:lower:]' | xargs | jq -r --arg country "$COUNTRY" '. | to_entries | .[] | select(.key | ascii_downcase == ($country | ascii_downcase)) | .value' /app/city-api/config/country-codes.json)
    debug "Extracted country code: '$COUNTRY_CODE'"

    if [ -z "$COUNTRY_CODE" ]; then
        debug "Error: Failed to get country code"
        exit 1
    fi

    # Get number of cities from configuration
    debug "Getting number of cities from configuration..."
    CITIES_LIMIT=$(yq '.services.cityApi.numberOfCitiesForSelectedCountry' /app/configuration.yml)
    debug "Number of cities to fetch: $CITIES_LIMIT"

    # Make API request
    debug "Making API request for country code: $COUNTRY_CODE..."
    RESPONSE=$(curl -X GET "https://wft-geo-db.p.rapidapi.com/v1/geo/cities?countryIds=$COUNTRY_CODE&limit=$CITIES_LIMIT&sort=-population&types=CITY" \
      -H "X-RapidAPI-Host: wft-geo-db.p.rapidapi.com" \
      -H "X-RapidAPI-Key: $GEODB_CITIES_API_KEY")

    debug "Raw API Response:"
    debug "$RESPONSE"

    # Process response and return JSON
    echo "$RESPONSE"

  "city-api/config/country-codes.json": |
    {
      "afghanistan": "AF",
      "albania": "AL",
      "sweden": "SE",
      "norway": "NO",
      "denmark": "DK",
      "finland": "FI",
      "iceland": "IS"
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config-yml
  namespace: global-city-streaming
data:
  configuration.yml: |
    services:
      cityApi:
        numberOfCitiesForSelectedCountry: 10
      kafka:
        bootstrapServers: kafka-0.kafka.global-city-streaming.svc.cluster.local:9092
      zookeeper:
        servers: zookeeper-0.zookeeper.global-city-streaming.svc.cluster.local:2181 