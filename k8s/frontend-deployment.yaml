apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: global-city-streaming
spec:
  type: LoadBalancer
  ports:
  - port: 3001
    targetPort: 3001
    name: http
  selector:
    app: frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: global-city-streaming
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      initContainers:
      - name: init-python-modules
        image: busybox
        command: ['/bin/sh', '-c']
        args:
        - |
          # Create Python package structure
          mkdir -p /target/shared/weather
          
          # Copy shared files
          cp -L /shared-files/* /target/shared/weather/ || true
          
          # Copy frontend files
          cp -rL /frontend-files/* /target/ || true
          
          # Create __init__.py files
          touch /target/shared/__init__.py
          touch /target/shared/weather/__init__.py
          
          # Fix file names (remove dots)
          cd /target/shared/weather
          mv weather.api.py api.py || true
          mv weather.city_coordinates.py city_coordinates.py || true
          mv weather.__init__.py __init__.py || true
          
          # Create start script
          cat > /target/start.sh << 'EOF'
          #!/bin/sh
          cd /app
          exec node server.js
          EOF
          chmod +x /target/start.sh
          
          # List contents for debugging
          echo "Contents of /target/shared/weather:"
          ls -la /target/shared/weather/
          echo "Contents of /target:"
          ls -la /target/
          
          # Ensure files are readable
          chmod -R 644 /target/shared/weather/*
          chmod -R 644 /target/*.js || true
          find /target -type d -exec chmod 755 {} \;
          chmod +x /target/start.sh
        volumeMounts:
        - name: shared-files
          mountPath: /shared-files
        - name: frontend-files
          mountPath: /frontend-files
        - name: python-modules
          mountPath: /target
      containers:
      - name: frontend
        image: joel030303/frontend:latest
        ports:
        - containerPort: 3001
        command: ["/app/start.sh"]
        env:
        - name: KAFKA_PRODUCER_URL
          value: "http://kafka-producer:8000"
        - name: FLINK_PROCESSOR_URL
          value: "http://flink-processor:8001"
        - name: POSTGRES_HOST
          value: "postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: POSTGRES_DB
          value: "postgres"
        - name: NODE_ENV
          value: "production"
        - name: CITY_API_URL
          value: "http://city-api:8003"
        - name: WEATHER_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: weather-api-key
        - name: PYTHONPATH
          value: "/app"
        volumeMounts:
        - name: python-modules
          mountPath: /app
        - name: app-config
          mountPath: /app/configuration.yml
          subPath: configuration.yml
        resources:
          limits:
            memory: "256Mi"
            cpu: "500m"
          requests:
            memory: "128Mi"
            cpu: "250m"
      volumes:
      - name: shared-files
        configMap:
          name: shared-files
      - name: frontend-files
        configMap:
          name: frontend-code
      - name: app-config
        configMap:
          name: app-config-yml
      - name: python-modules
        emptyDir: {} 