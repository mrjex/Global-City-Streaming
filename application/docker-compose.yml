version: "2.4"

networks:
  app_network:
    driver: bridge

services:
  frontend:
    build:
      context: ../frontend
    container_name: frontend
    ports:
      - "3001:3000"
    networks:
      - app_network
    restart: unless-stopped
    mem_limit: 256m

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      KAFKA_HEAP_OPTS: "-Xmx128m -Xms64m"
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "*"
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost
    ports:
      - "32181:32181"
    networks:
      - app_network
    restart: unless-stopped
    mem_limit: 256m
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: echo ruok | nc localhost 32181 || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "test-topic:1:1"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: "-Xmx256m -Xms128m"
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 60000
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 60000
      KAFKA_LOG_RETENTION_HOURS: 1
      KAFKA_LOG_SEGMENT_BYTES: 536870912
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_JMX_PORT: 9998
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - app_network
    restart: unless-stopped
    mem_limit: 512m
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka-producer:
    build:
      context: ./kafka-producer
    container_name: kafka-producer
    volumes:
      - ../debug-api:/mnt:rw
      - ../:/app:rw
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_SERVER: "kafka:9092"
      ZOOKEEPER_SERVER: "zookeeper:32181"
      PRODUCER_INTERVAL: 100
    networks:
      - app_network
    restart: unless-stopped
    mem_limit: 256m
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  flink-processor:
    build:
      context: ./flink-processor
      dockerfile: Dockerfile
    container_name: flink-processor
    volumes:
      - ../debug-api:/mnt:rw
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_SERVER: "kafka:9092"
      ZOOKEEPER_SERVER: "zookeeper:32181"
      PRODUCER_INTERVAL: 100
    networks:
      - app_network
    restart: unless-stopped
    mem_limit: 512m
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  postgres:
    build:
      context: ./postgres
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - 5438:5432
    networks:
      - app_network
    volumes:
      - /var/lib/postgresql/data:/var/lib/postgresql/data:rw
    mem_limit: 256m
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  settings:
  data: